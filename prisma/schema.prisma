// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}
//? symbol meaning not required

model AccountRole {
    @@map("account_role")
    id                      Int @id @default(autoincrement())
    name                    String
    description             String?

    accounts                Account[]

    createdAt               DateTime @default(now())
    updatedAt               DateTime @default(now())
}

model Account {
    @@map("account")
    id                      Int @id @default(autoincrement())
    username                String @unique
    password                String

    name                    String?
    phone_number            String?
    role_id                 Int?

    createdAt               DateTime @default(now())
    updatedAt               DateTime @default(now())

    //@@map("accounts") //name of table in database (accounts, not account)
    //ralationship
    notes                   Note[] //1 user have many note
    sessions                AccountSession[] //1 acocunt can login more

    role                    AccountRole? @relation(fields: [role_id], references: [id])
}

model AccountSession {
    @@map("account_session")
    id                      Int @id @default(autoincrement())
    access_token            String

    //relationship with Account table
    accountId               Int
    account                 Account @relation(fields: [accountId], references: [id])

    createdAt               DateTime @default(now())
    updatedAt               DateTime @default(now())
}

model Note {
    @@map("note")
    id                      Int @id @default(autoincrement())
    title                   String
    description             String? //can be null
    url                     String? //can be null

    //relationship with Account table
    accountId               Int
    account                 Account @relation(fields: [accountId], references: [id])

    createdAt               DateTime @default(now())
    updatedAt               DateTime @default(now())
}